
uart0c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000157  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f6  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000117  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a0  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000036  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	}
}

void USART_Init(unsigned int baudrate) //Функция инициализации USART
{
	UBRR0H = (unsigned char) (baudrate>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) baudrate;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	//UCSRA = ( 1 << U2X); //Устанавливаем удвоение скорости
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); //Разрешение на прием и на передачу через USART
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (0 << USBS0)|(3 << UCSZ00);
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24
  96:	92 e3       	ldi	r25, 0x32	; 50
}

unsigned char USART_Receive(void) //Функция приема данных
{
	while (!(UCSR0A & (1 << RXC0))); //Ожидание приема символа
  98:	80 91 c0 00 	lds	r24, 0x00C0
  9c:	87 ff       	sbrs	r24, 7
  9e:	fc cf       	rjmp	.-8      	; 0x98 <main+0x18>
	return UDR0; //Возврат содержимого буфера приема символа
  a0:	20 91 c6 00 	lds	r18, 0x00C6
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while (!(UCSR0A & (1 << UDRE0)) ); //Ожидание опустошения буфера приема
  a4:	80 91 c0 00 	lds	r24, 0x00C0
  a8:	85 ff       	sbrs	r24, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <main+0x24>
	UDR0 = data; //Начало передачи данных
  ac:	20 93 c6 00 	sts	0x00C6, r18
void USART_Transmit( unsigned char data ); 

int main( void ) //Главная функция
{// 51
	USART_Init(103); //Скорость соединения 9600 бит/с для микроконтроллера ATMega328P
	for (unsigned char i=0x32;i<0x49;i++) //Вечный цикл
  b0:	9f 5f       	subi	r25, 0xFF	; 255
  b2:	99 34       	cpi	r25, 0x49	; 73
  b4:	89 f7       	brne	.-30     	; 0x98 <main+0x18>
	{
		USART_Transmit(USART_Receive()); //Отправка принятого символа назад
		//USART_Transmit(i);//0x36);
	}
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <USART_Init>:

void USART_Init(unsigned int baudrate) //Функция инициализации USART
{
	UBRR0H = (unsigned char) (baudrate>>8);
  bc:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baudrate;
  c0:	80 93 c4 00 	sts	0x00C4, r24
	//UCSRA = ( 1 << U2X); //Устанавливаем удвоение скорости
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); //Разрешение на прием и на передачу через USART
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (0 << USBS0)|(3 << UCSZ00);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24
}
  d0:	08 95       	ret

000000d2 <USART_Receive>:

unsigned char USART_Receive(void) //Функция приема данных
{
	while (!(UCSR0A & (1 << RXC0))); //Ожидание приема символа
  d2:	80 91 c0 00 	lds	r24, 0x00C0
  d6:	87 ff       	sbrs	r24, 7
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <USART_Receive>
	return UDR0; //Возврат содержимого буфера приема символа
  da:	80 91 c6 00 	lds	r24, 0x00C6
}
  de:	08 95       	ret

000000e0 <USART_Transmit>:

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
  e0:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)) ); //Ожидание опустошения буфера приема
  e2:	80 91 c0 00 	lds	r24, 0x00C0
  e6:	85 ff       	sbrs	r24, 5
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <USART_Transmit+0x2>
	UDR0 = data; //Начало передачи данных
  ea:	90 93 c6 00 	sts	0x00C6, r25
}
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
