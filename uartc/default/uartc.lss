
uartc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003e  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000017e  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000103  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018d  00000000  00000000  00000495  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c9  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c0  00000000  00000000  0000072d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8e:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uartInit>:
		writeSerial("Hello World!\r\n");
	}
}
void uartInit(unsigned int baudrate) //Функция инициализации USART
{
	UBRR0H = (unsigned char) (baudrate>>8);
  96:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baudrate;
  9a:	80 93 c4 00 	sts	0x00C4, r24
	//UCSRA = ( 1 << U2X); //Устанавливаем удвоение скорости
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); //Разрешение на прием и на передачу через USART
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (0 << USBS0)|(3 << UCSZ00); // 8N1
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24
}
  aa:	08 95       	ret

000000ac <writeSerial>:
int writeSerial(char* str)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	for(i=0;strlen(str); i++)
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	88 81       	ld	r24, Y
  b6:	88 23       	and	r24, r24
  b8:	89 f0       	breq	.+34     	; 0xdc <writeSerial+0x30>
	{
		while(!(UCSR0A&(1<<UDRE0))){}; // wait ready of port
  ba:	a0 ec       	ldi	r26, 0xC0	; 192
  bc:	b0 e0       	ldi	r27, 0x00	; 0
		UDR0 = str[i];
  be:	26 ec       	ldi	r18, 0xC6	; 198
  c0:	30 e0       	ldi	r19, 0x00	; 0
}
int writeSerial(char* str)
{
	for(i=0;strlen(str); i++)
	{
		while(!(UCSR0A&(1<<UDRE0))){}; // wait ready of port
  c2:	8c 91       	ld	r24, X
  c4:	85 ff       	sbrs	r24, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <writeSerial+0x16>
		UDR0 = str[i];
  c8:	fe 01       	movw	r30, r28
  ca:	e6 0f       	add	r30, r22
  cc:	f1 1d       	adc	r31, r1
  ce:	80 81       	ld	r24, Z
  d0:	f9 01       	movw	r30, r18
  d2:	80 83       	st	Z, r24
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); //Разрешение на прием и на передачу через USART
	UCSR0C = (0 << USBS0)|(3 << UCSZ00); // 8N1
}
int writeSerial(char* str)
{
	for(i=0;strlen(str); i++)
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	88 81       	ld	r24, Y
  d8:	88 23       	and	r24, r24
  da:	99 f7       	brne	.-26     	; 0xc2 <writeSerial+0x16>
	{
		while(!(UCSR0A&(1<<UDRE0))){}; // wait ready of port
		UDR0 = str[i];
	}
	return 0;
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <main>:

//Глобальные переменные
register unsigned char i asm("r22");

int main( void ) 
{
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
	uartInit(UBRRN);	
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <uartInit>
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fe:	0f 2e       	mov	r0, r31
 100:	f0 e9       	ldi	r31, 0x90	; 144
 102:	ef 2e       	mov	r14, r31
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	ff 2e       	mov	r15, r31
 108:	f0 2d       	mov	r31, r0
	for(;;)
	{
		_delay_ms(1000);
		writeSerial("Hello World!\r\n");
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	c0 e1       	ldi	r28, 0x10	; 16
 110:	d7 e2       	ldi	r29, 0x27	; 39
 112:	05 c0       	rjmp	.+10     	; 0x11e <main+0x38>
 114:	c7 01       	movw	r24, r14
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11e:	21 15       	cp	r18, r1
 120:	31 05       	cpc	r19, r1
 122:	c1 f7       	brne	.-16     	; 0x114 <main+0x2e>
 124:	c8 01       	movw	r24, r16
 126:	0e 94 56 00 	call	0xac	; 0xac <writeSerial>
 12a:	9e 01       	movw	r18, r28
 12c:	f8 cf       	rjmp	.-16     	; 0x11e <main+0x38>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
